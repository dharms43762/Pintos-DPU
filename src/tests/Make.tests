# -*- makefile -*-

include $(patsubst %,$(SRCDIR)/%/Make.tests,$(TEST_SUBDIRS))

PROGS = $(foreach subdir,$(TEST_SUBDIRS),$($(subdir)_PROGS))
TESTS = $(foreach subdir,$(TEST_SUBDIRS),$($(subdir)_TESTS))
EXTRA_GRADES = $(foreach subdir,$(TEST_SUBDIRS),$($(subdir)_EXTRA_GRADES))

OUTPUTS = $(addsuffix .output,$(TESTS) $(EXTRA_GRADES))
ERRORS = $(addsuffix .errors,$(TESTS) $(EXTRA_GRADES))
RESULTS = $(addsuffix .result,$(TESTS) $(EXTRA_GRADES))

# tests for portions of Project 1 only.  DePauw OS course.  Douglas Harms
TESTS_ALARM = $(foreach subdir,$(TEST_SUBDIRS),$($(subdir)_TESTS_ALARM))
RESULTS_ALARM = $(addsuffix .result,$(TESTS_ALARM) )
TESTS_PRIORITY = $(foreach subdir,$(TEST_SUBDIRS),$($(subdir)_TESTS_PRIORITY))
RESULTS_PRIORITY = $(addsuffix .result,$(TESTS_PRIORITY) )
TESTS_MLFQS = $(foreach subdir,$(TEST_SUBDIRS),$($(subdir)_TESTS_MLFQS))
RESULTS_MLFQS = $(addsuffix .result,$(TESTS_MLFQS) )

ifdef PROGS
include ../../Makefile.userprog
endif

TIMEOUT = 60

clean::
	rm -f $(OUTPUTS) $(ERRORS) $(RESULTS) 

grade:: results
	$(SRCDIR)/tests/make-grade $(SRCDIR) $< $(GRADING_FILE) | tee $@

check:: results
	@cat $<
	@COUNT="`egrep '^(pass|FAIL) ' $< | wc -l | sed 's/[ 	]//g;'`"; \
	FAILURES="`egrep '^FAIL ' $< | wc -l | sed 's/[ 	]//g;'`"; \
	if [ $$FAILURES = 0 ]; then					  \
		echo "All $$COUNT tests passed.";			  \
	else								  \
		echo "$$FAILURES of $$COUNT tests failed.";		  \
		exit 1;							  \
	fi

results: $(RESULTS)
	@for d in $(TESTS) $(EXTRA_GRADES); do			\
		if echo PASS | cmp -s $$d.result -; then	\
			echo "pass $$d";			\
		else						\
			echo "FAIL $$d";			\
		fi;						\
	done > $@

# The following are for checking parts of project 1 at DePauw.  Douglas Harms
check-alarm:: results-alarm
	@cat $<
	@COUNT="`egrep '^(pass|FAIL) ' $< | wc -l | sed 's/[ 	]//g;'`"; \
	FAILURES="`egrep '^FAIL ' $< | wc -l | sed 's/[ 	]//g;'`"; \
	if [ $$FAILURES = 0 ]; then					  \
		echo "All $$COUNT tests passed.";			  \
	else								  \
		echo "$$FAILURES of $$COUNT tests failed.";		  \
		exit 1;							  \
	fi

results-alarm: $(RESULTS_ALARM)
	@for d in $(TESTS_ALARM) ; do			\
		if echo PASS | cmp -s $$d.result -; then	\
			echo "pass $$d";			\
		else						\
			echo "FAIL $$d";			\
		fi;						\
	done > $@

check-priority:: results-priority
	@cat $<
	@COUNT="`egrep '^(pass|FAIL) ' $< | wc -l | sed 's/[ 	]//g;'`"; \
	FAILURES="`egrep '^FAIL ' $< | wc -l | sed 's/[ 	]//g;'`"; \
	if [ $$FAILURES = 0 ]; then					  \
		echo "All $$COUNT tests passed.";			  \
	else								  \
		echo "$$FAILURES of $$COUNT tests failed.";		  \
		exit 1;							  \
	fi

results-priority: $(RESULTS_PRIORITY)
	@for d in $(TESTS_PRIORITY) ; do			\
		if echo PASS | cmp -s $$d.result -; then	\
			echo "pass $$d";			\
		else						\
			echo "FAIL $$d";			\
		fi;						\
	done > $@

check-mlfqs:: results-mlfqs
	@cat $<
	@COUNT="`egrep '^(pass|FAIL) ' $< | wc -l | sed 's/[ 	]//g;'`"; \
	FAILURES="`egrep '^FAIL ' $< | wc -l | sed 's/[ 	]//g;'`"; \
	if [ $$FAILURES = 0 ]; then					  \
		echo "All $$COUNT tests passed.";			  \
	else								  \
		echo "$$FAILURES of $$COUNT tests failed.";		  \
		exit 1;							  \
	fi

results-mlfqs: $(RESULTS_MLFQS)
	@for d in $(TESTS_MLFQS) ; do			\
		if echo PASS | cmp -s $$d.result -; then	\
			echo "pass $$d";			\
		else						\
			echo "FAIL $$d";			\
		fi;						\
	done > $@

outputs:: $(OUTPUTS)

$(foreach prog,$(PROGS),$(eval $(prog).output: $(prog)))
$(foreach test,$(TESTS),$(eval $(test).output: $($(test)_PUTFILES)))
$(foreach test,$(TESTS),$(eval $(test).output: TEST = $(test)))
$(foreach test,$(TESTS),$(eval $(test).result: $(test).output $(test).ck))

# Prevent an environment variable VERBOSE from surprising us.
VERBOSE =

TESTCMD = pintos -v -k -T $(TIMEOUT)
TESTCMD += $(SIMULATOR)
TESTCMD += $(PINTOSOPTS)
ifeq ($(filter userprog, $(KERNEL_SUBDIRS)), userprog)
TESTCMD += $(FILESYSSOURCE)
TESTCMD += $(foreach file,$(PUTFILES),-p $(file) -a $(notdir $(file)))
endif
ifeq ($(filter vm, $(KERNEL_SUBDIRS)), vm)
TESTCMD += --swap-size=4
endif
TESTCMD += -- -q
TESTCMD += $(KERNELFLAGS)
ifeq ($(filter userprog, $(KERNEL_SUBDIRS)), userprog)
TESTCMD += -f
endif
TESTCMD += $(if $($(TEST)_ARGS),run '$(*F) $($(TEST)_ARGS)',run $(*F))
TESTCMD += < /dev/null
TESTCMD += 2> $(TEST).errors $(if $(VERBOSE),|tee,>) $(TEST).output
%.output: kernel.bin loader.bin
	$(TESTCMD)

%.result: %.ck %.output
	perl -I$(SRCDIR) $< $* $@
